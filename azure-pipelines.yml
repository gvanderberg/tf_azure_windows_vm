trigger:
  - master

variables:
- group: 'Terraform BE'
- group: 'Terraform CLI (Prod)'
- name: arm_client_id
  value: $(terraform.client_id)
- name: arm_client_secret
  value: $(terraform.client_secret)
- name: arm_subscription_id
  value: $(terraform.subscription_id)
- name: arm_tenant_id
  value: $(terraform.tenant_id)

stages:
- stage: build
  displayName: 'Package scripts'
  pool:
    vmImage: ubuntu-latest

  jobs:
  - job: build
    displayName: Package scripts

    steps:
    - task: GitVersion@5
      inputs:
        preferBundledVersion: false
        configFilePath: 'GitVersion.yml'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/src'
        ArtifactName: 'drop'

- stage: terraform_plan
  displayName: 'terraform plan'
  dependsOn: build
  pool:
    vmImage: ubuntu-latest
  condition: succeeded('build')

  jobs:
  - deployment: terraform_plan
    displayName: terraform plan
    environment: prod

    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace tokens in $(Pipeline.Workspace)/drop/*.tf'
            inputs:
              targetFiles: '$(Pipeline.Workspace)/drop/*.tf'
              escapeType: none
              tokenPrefix: '__'
              tokenSuffix: '__'

          - script: |
              set -e

              echo 'hostname = "app.terraform.io"' | tee -a backend.tfvars
              echo 'organization = "$(terraform.organization)"' | tee -a backend.tfvars
              echo 'token = "$(terraform.token)"' | tee -a backend.tfvars
              echo 'workspaces { name = "$(workspace_name)" }' | tee -a backend.tfvars

              # Initialize Terraform.
              terraform init -no-color -input=false -backend-config="backend.tfvars"

              terraform plan -out=tfplan -no-color -input=false
            displayName: 'terraform plan'
            env:
              ARM_CLIENT_ID: $(arm_client_id)
              ARM_CLIENT_SECRET: $(arm_client_secret)
              ARM_TENANT_ID: $(arm_tenant_id)
              ARM_SUBSCRIPTION_ID: $(arm_subscription_id)
            workingDirectory: '$(Pipeline.Workspace)/drop'

          - publish: $(Pipeline.Workspace)/drop
            artifact: tfplan

- stage: terraform_apply
  displayName: terraform apply
  dependsOn: terraform_plan
  pool:
    vmImage: ubuntu-latest
  condition: succeeded('terraform_plan')

  jobs:
  - deployment: terraform_apply
    displayName: terraform apply
    environment: prod

    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: tfplan

          - script: |
              terraform apply -auto-approve -no-color -input=false tfplan
            displayName: 'terraform plan'
            env:
              ARM_CLIENT_ID: $(arm_client_id)
              ARM_CLIENT_SECRET: $(arm_client_secret)
              ARM_TENANT_ID: $(arm_tenant_id)
              ARM_SUBSCRIPTION_ID: $(arm_subscription_id)
            workingDirectory: '$(Pipeline.Workspace)/tfplan'
