trigger:
  - master

variables:
- group: Terraform BE
- group: Terraform CLI
- name: tf_path
  value: $(Pipeline.Workspace)/drop
- name: tf_state_key
  value: $(Build.BuildId)

stages:
- stage: build
  displayName: Package scripts
  pool:
    vmImage: ubuntu-latest

  jobs:
  - job: build
    displayName: Package scripts

    steps:
    - task: GitVersion@5
      inputs:
        preferBundledVersion: false
        configFilePath: GitVersion.yml

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: $(Build.SourcesDirectory)/src
        ArtifactName: drop

- stage: terraform_plan
  displayName: terraform plan
  dependsOn: build
  pool:
    vmImage: ubuntu-latest
  condition: succeeded('build')

  jobs:
  - deployment: terraform_plan
    displayName: terraform plan
    environment: prod

    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: Replace tokens in $(Pipeline.Workspace)/drop/*.tf
            inputs:
              targetFiles: $(Pipeline.Workspace)/drop/*.tf
              escapeType: none
              tokenPrefix: __
              tokenSuffix: __

          - script: |
              set -e

              echo 'hostname = "app.terraform.io"' | tee -a backend.tfvars
              echo 'organization = "$(tf_organization)"' | tee -a backend.tfvars
              echo 'token = "$(tf_token)"' | tee -a backend.tfvars
              echo 'workspaces { name = "$(workspace_name)" }' | tee -a backend.tfvars

              # Initialize Terraform.
              terraform init -no-color -input=false -backend-config="backend.tfvars"

              terraform plan -out=tfplan -no-color -input=false
            displayName: terraform plan
            env:
              ARM_CLIENT_ID: $(tf_client_id)
              ARM_CLIENT_SECRET: $(tf_client_secret)
              ARM_TENANT_ID: $(tf_tenant_id)
              ARM_SUBSCRIPTION_ID: $(tf_subscription_id)
            workingDirectory: $(Pipeline.Workspace)/drop

          - script: |
              echo "Compressing $(tf_path) directory..."
              tar -czf $(tf_state_key).tar.gz -C $(tf_path) .
            displayName: 'Compress $(tf_path) Artifact'

          - publish: $(tf_state_key).tar.gz
            artifact: tfplan

- stage: terraform_apply
  displayName: terraform apply
  dependsOn: terraform_plan
  pool:
    vmImage: ubuntu-latest
  condition: succeeded('terraform_plan')

  jobs:
  - deployment: terraform_apply
    displayName: terraform apply
    environment: prod

    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: tfplan

          - script: |
              mkdir -p $(tf_state_key)/tf 
              tar -xzvf tfplan/$(tf_state_key).tar.gz --directory $(tf_state_key)/tf
            displayName: 'Extract Artifact to $(tf_state_key)/tf'
            workingDirectory: '$(Pipeline.Workspace)'

          - script: |
              terraform apply -auto-approve -no-color -input=false tfplan
            displayName: terraform apply
            env:
              ARM_CLIENT_ID: $(tf_client_id)
              ARM_CLIENT_SECRET: $(tf_client_secret)
              ARM_TENANT_ID: $(tf_tenant_id)
              ARM_SUBSCRIPTION_ID: $(tf_subscription_id)
            workingDirectory: $(Pipeline.Workspace)/$(tf_state_key)/tf
